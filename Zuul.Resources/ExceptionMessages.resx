<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ChangePasswordNewPasswordMustNotMatchOld" xml:space="preserve">
    <value>Could not change password for User Account, the new password was the same as the old password.</value>
  </data>
  <data name="ChangePasswordOldPasswordNotCorrect" xml:space="preserve">
    <value>Could not change password for User Account, the old password specified was incorrect.</value>
  </data>
  <data name="ChangePasswordUserAccountEmailAddressNotFound" xml:space="preserve">
    <value>Could not change password for User Account, the supplied email address did not match an existing account: {0}</value>
  </data>
  <data name="CreatePostMessageError" xml:space="preserve">
    <value>Could not create Post, the message must be between 3 and 4000 characters.</value>
  </data>
  <data name="CreatePostMustBeLoggedIn" xml:space="preserve">
    <value>Could not create Post, you must be logged in to perform this action.</value>
  </data>
  <data name="CreatePostParentPostNotFound" xml:space="preserve">
    <value>Could not create Post, the suppplied parent Post was not found.</value>
  </data>
  <data name="CreatePostThreadNotFound" xml:space="preserve">
    <value>Could not create Post, the supplied Thread was not found.</value>
  </data>
  <data name="CreatePostTitleError" xml:space="preserve">
    <value>Could not create Post, the subject must be between 3 and 200 characters.</value>
  </data>
  <data name="CreatePostUserAccountNotFound" xml:space="preserve">
    <value>Could not create Post, the User Account could not be found.</value>
  </data>
  <data name="CreateThreadMessageError" xml:space="preserve">
    <value>Could not create Thread, the message must be between 3 and 4000 characters.</value>
  </data>
  <data name="CreateThreadMustBeLoggedIn" xml:space="preserve">
    <value>Could not create Thread, you must be logged in to perform this action.</value>
  </data>
  <data name="CreateThreadTitleError" xml:space="preserve">
    <value>Could not create Thread, the subject must be between 3 and 200 characters.</value>
  </data>
  <data name="CreateThreadUserAccountNotFound" xml:space="preserve">
    <value>Could not create Thread, the User Account could not be found.</value>
  </data>
  <data name="CreateUserAccountEmailAddressDuplicate" xml:space="preserve">
    <value>Could not create User Account, an account already exists with the specified email address: {0}</value>
  </data>
  <data name="CreateUserAccountEmailAddressNoAtSymbol" xml:space="preserve">
    <value>Could not create User Account, the supplied email address must contain an @ symbol: {0}</value>
  </data>
  <data name="CreateUserAccountEmailAddressNoDotSymbol" xml:space="preserve">
    <value>Could not create User Account, the supplied email address must contain a . symbol: {0}</value>
  </data>
  <data name="CreateUserAccountEmailAddressTooLong" xml:space="preserve">
    <value>Could not create User Account, the supplied email address was too long. An email address must be 256 characters or less.</value>
  </data>
  <data name="CreateUserAccountEmptyEmailAddress" xml:space="preserve">
    <value>Could not create User Account, no email address was supplied.</value>
  </data>
  <data name="CreateUserAccountEmptyUsername" xml:space="preserve">
    <value>Could not create User Account, an account already exists with the specified username: {0}</value>
  </data>
  <data name="CreateUserAccountPasswordMustBeSupplied" xml:space="preserve">
    <value>Could not create User Account, a password must be supplied.</value>
  </data>
  <data name="CreateUserAccountPasswordsMustMatch" xml:space="preserve">
    <value>Could not create User Account, the supplied passwords much match.</value>
  </data>
  <data name="CreateUserAccountUsernameDuplicate" xml:space="preserve">
    <value>Could not create User Account, an account already exists with the specified username: {0}</value>
  </data>
  <data name="CreateUserAccountUsernameTooLong" xml:space="preserve">
    <value>Could not create User Account, the supplied username was too long. A username must be 30 characters or less.</value>
  </data>
  <data name="UserAccountNotActivated" xml:space="preserve">
    <value>Could not validate User Account, the account is not yet active. Please click on the link sent to {0} to activate your account.</value>
  </data>
  <data name="UserAccountPasswordNoAlphabetCharacters" xml:space="preserve">
    <value>The supplied password must contain at least one alphabet character (A-Z).</value>
  </data>
  <data name="UserAccountPasswordNoNonAlphanumericCharacter" xml:space="preserve">
    <value>The supplied password must contain at least one non alphanumeric character (for example punctuation or mathematical symbols).</value>
  </data>
  <data name="UserAccountPasswordNoNumericCharacter" xml:space="preserve">
    <value>The supplied password must contain at least one numeric character (0-9).</value>
  </data>
  <data name="UserAccountPasswordTooLong" xml:space="preserve">
    <value>The supplied password must be 20 character or less in length.</value>
  </data>
  <data name="UserAccountPasswordTooShort" xml:space="preserve">
    <value>The supplied password must be at least 8 characters in length.</value>
  </data>
  <data name="UserAccountUserIdNotFound" xml:space="preserve">
    <value>Could not find the specified User Account.</value>
  </data>
  <data name="ValidateUserAccountEmailNotFound" xml:space="preserve">
    <value>Could not validate User Account, the supplied email address did not match an existing account: {0}</value>
  </data>
  <data name="ValidateUsernameNotFound" xml:space="preserve">
    <value>Could not validate User Account, the supplied username did not match an existing account: {0}</value>
  </data>
</root>